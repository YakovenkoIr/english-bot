import json
import random
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import asyncio

TOKEN = "–¢–£–¢_–¢–í–û–ô_–¢–û–ö–ï–ù"

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ü–∞–Ω–µ–ª—å –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")],
        [KeyboardButton(text="üí¨ –°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é")]
    ],
    resize_keyboard=True
)

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è –∑ JSON
with open("questions.json", "r", encoding="utf-8") as f:
    questions = json.load(f)

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_data = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! üëã\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∞ –ø–∞–Ω–µ–ª—ñ –Ω–∏–∂—á–µ:",
        reply_markup=main_menu
    )

# –ù–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"
@dp.message(F.text == "üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")
async def start_test(message: types.Message):
    user_data[message.from_user.id] = {
        "level": None,
        "score": 0,
        "current_q": 0,
        "questions": []
    }
    # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ 1 –ø–∏—Ç–∞–Ω–Ω—é –∑ –∫–æ–∂–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
    for level in questions:
        q = random.choice(questions[level])
        q["level"] = level
        user_data[message.from_user.id]["questions"].append(q)

    await send_question(message)

# –§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–∏—Ç–∞–Ω–Ω—è
async def send_question(message):
    data = user_data[message.from_user.id]
    if data["current_q"] < len(data["questions"]):
        q = data["questions"][data["current_q"]]
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=opt)] for opt in q["options"]],
            resize_keyboard=True
        )
        await message.answer(q["question"], reply_markup=kb)
    else:
        # –û–±—á–∏—Å–ª—é—î–º–æ —Ä—ñ–≤–µ–Ω—å
        levels = [q["level"] for i, q in enumerate(data["questions"]) if i < data["score"]]
        if levels:
            user_level = levels[-1]
        else:
            user_level = "A1"
        user_data[message.from_user.id]["level"] = user_level

        await message.answer(
            f"‚úÖ –ó–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç—É –≤–∞—à —Ä—ñ–≤–µ–Ω—å: *{user_level}*.\n"
            f"–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é!",
            parse_mode="Markdown",
            reply_markup=main_menu
        )

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è
    if user_id in user_data and user_data[user_id]["current_q"] < len(user_data[user_id]["questions"]):
        q = user_data[user_id]["questions"][user_data[user_id]["current_q"]]
        if message.text == q["answer"]:
            user_data[user_id]["score"] += 1
        user_data[user_id]["current_q"] += 1
        await send_question(message)

    # –Ø–∫—â–æ –æ–±—Ä–∞–≤ "–°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è"
    elif message.text == "üí¨ –°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é":
        if user_id not in user_data or not user_data[user_id].get("level"):
            await message.answer("‚ùå –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–π–¥—ñ—Ç—å —Ç–µ—Å—Ç, —â–æ–± –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –≤–∞—à —Ä—ñ–≤–µ–Ω—å.")
        else:
            await message.answer(
                "–î–æ–±—Ä–µ! –¢–µ–ø–µ—Ä —Å–ø—ñ–ª–∫—É—î–º–æ—Å—å –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é üòä\n\n–ù–∞–ø–∏—à—ñ—Ç—å –±—É–¥—å-—â–æ, —ñ —è –≤—ñ–¥–ø–æ–≤—ñ–º –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é."
            )

    # –†–µ–∂–∏–º —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è
    elif user_id in user_data and user_data[user_id].get("level"):
        await message.answer(f"Your message in English: {message.text}")


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
