import os
import json
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from groq import Groq

# ---------------- –õ–û–ì–Ü ----------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ---------------- –ó–ú–Ü–ù–ù–Ü ----------------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")

if not TELEGRAM_TOKEN:
    raise SystemExit("‚ùå TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∏–π —É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ")
if not GROQ_API_KEY:
    raise SystemExit("‚ùå GROQ_API_KEY –Ω–µ –∑–∞–¥–∞–Ω–∏–π —É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ")

# Groq –∫–ª—ñ—î–Ω—Ç
groq_client = Groq(api_key=GROQ_API_KEY)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω—å –∑ JSON
with open("questions.json", "r", encoding="utf-8") as f:
    QUESTIONS = json.load(f)

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_progress = {}

# ---------------- –§–£–ù–ö–¶–Ü–á ----------------

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç üìñ", "–°–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ AI ü§ñ"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø English Bot.\n"
        "üìñ –û–±–µ—Ä–∏, —â–æ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏:",
        reply_markup=markup
    )

# –í–∏–±—ñ—Ä —Ä–µ–∂–∏–º—É
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.message.from_user.id

    if text == "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç üìñ":
        user_progress[user_id] = {"q_index": 0, "score": 0}
        await send_question(update, context)

    elif text == "–°–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ AI ü§ñ":
        await update.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é, —ñ —è –≤—ñ–¥–ø–æ–≤—ñ–º!")

    elif user_id in user_progress:
        await check_answer(update, context, text)

    else:
        await chat_ai(update, context, text)

# –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è –∑ —Ç–µ—Å—Ç—É
async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    progress = user_progress[user_id]
    q_index = progress["q_index"]

    if q_index < len(QUESTIONS):
        q = QUESTIONS[q_index]
        keyboard = [[opt] for opt in q["options"]]
        markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(q["question"], reply_markup=markup)
    else:
        score = progress["score"]
        level = "A1 (–ø–æ—á–∞—Ç–∫–æ–≤–∏–π)"
        if score >= 4:
            level = "B1 (—Å–µ—Ä–µ–¥–Ω—ñ–π)"
        elif score >= 7:
            level = "B2 (–≤–∏—â–µ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ)"

        await update.message.reply_text(
            f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n–¢–≤—ñ–π —Ä—ñ–≤–µ–Ω—å: {level}\n\n–¢–µ–ø–µ—Ä –º–æ–∂–µ—à –ø–µ—Ä–µ–π—Ç–∏ —É —Ä–µ–∂–∏–º AI ü§ñ —Ç–∞ –ø—Ä–∞–∫—Ç–∏–∫—É–≤–∞—Ç–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É."
        )
        del user_progress[user_id]

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
async def check_answer(update: Update, context: ContextTypes.DEFAULT_TYPE, user_answer: str):
    user_id = update.message.from_user.id
    progress = user_progress[user_id]
    q_index = progress["q_index"]

    if q_index < len(QUESTIONS):
        correct = QUESTIONS[q_index]["answer"]
        if user_answer == correct:
            progress["score"] += 1

        progress["q_index"] += 1
        await send_question(update, context)

# Chat –∑ Groq AI
async def chat_ai(update: Update, context: ContextTypes.DEFAULT_TYPE, user_text: str):
    try:
        response = groq_client.chat.completions.create(
            model="llama-3.1-8b-instant",
            messages=[
                {"role": "system", "content": "You are an English teacher. Always reply in English, short and clear."},
                {"role": "user", "content": user_text}
            ]
        )
        answer = response.choices[0].message.content
        await update.message.reply_text(answer)
    except Exception as e:
        logger.error(f"AI error: {e}")
        await update.message.reply_text("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑—ñ –®–Ü.")

# ---------------- –ó–ê–ü–£–°–ö ----------------
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("‚úÖ Bot is running...")
    app.run_polling()

if __name__ == "__main__":
    main()
