import os
import json
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from groq import Groq

# –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è API –∫–ª—é—á—ñ–≤
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")

client = Groq(api_key=GROQ_API_KEY)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω—å –∑ —Ñ–∞–π–ª—É
with open("questions.json", "r", encoding="utf-8") as f:
    QUESTIONS = json.load(f)

# –°–¢–ê–ù–ò
CHOOSING, TEST, CHAT = range(3)

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
user_data = {}

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton("üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")], [KeyboardButton("ü§ñ –°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ AI")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! üëã –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=reply_markup)
    return CHOOSING

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É
async def choose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç":
        context.user_data["level"] = "A1"  # –ü–æ—á–∏–Ω–∞—î–º–æ –∑ A1
        context.user_data["index"] = 0
        context.user_data["score"] = 0
        return await ask_question(update, context)

    elif text == "ü§ñ –°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ AI":
        await update.message.reply_text("–¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é –∑ AI ü§ñ")
        return CHAT

# –ó–∞–¥–∞—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è
async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    level = context.user_data["level"]
    index = context.user_data["index"]

    if index < len(QUESTIONS[level]):
        q = QUESTIONS[level][index]
        options = [[KeyboardButton(opt)] for opt in q["options"]]
        reply_markup = ReplyKeyboardMarkup(options, resize_keyboard=True)
        await update.message.reply_text(q["question"], reply_markup=reply_markup)
        return TEST
    else:
        # –Ø–∫—â–æ –ø–∏—Ç–∞–Ω–Ω—è –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—è ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        score = context.user_data["score"]
        total = len(QUESTIONS[level])
        result_text = f"–¢–µ—Å—Ç —Ä—ñ–≤–Ω—è {level} –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚úÖ\n–ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {score}/{total}\n"

        if score == total:
            if level == "A1":
                context.user_data["level"] = "A2"
                context.user_data["index"] = 0
                return await ask_question(update, context)
            elif level == "A2":
                context.user_data["level"] = "B1"
                context.user_data["index"] = 0
                return await ask_question(update, context)
            else:
                await update.message.reply_text(result_text + "\n–í–∞—à —Ä—ñ–≤–µ–Ω—å ‚Äî **B1** üéâ\n–†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ AI ü§ñ")
        else:
            await update.message.reply_text(result_text + f"\n–í–∞—à —Ä—ñ–≤–µ–Ω—å ‚Äî **{level}** üìò\n–†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ AI ü§ñ")

        return CHOOSING

# –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–∞ —Ç–µ—Å—Ç
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    level = context.user_data["level"]
    index = context.user_data["index"]
    q = QUESTIONS[level][index]

    if update.message.text == q["answer"]:
        context.user_data["score"] += 1

    context.user_data["index"] += 1
    return await ask_question(update, context)

# AI —á–∞—Ç
async def chat_ai(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text

    response = client.chat.completions.create(
        model="llama3-8b-8192",
        messages=[
            {"role": "system", "content": "You are an English teacher. Always reply in English."},
            {"role": "user", "content": user_input},
        ],
    )

    bot_reply = response.choices[0].message.content
    await update.message.reply_text(bot_reply)

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose)],
            TEST: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)],
            CHAT: [MessageHandler(filters.TEXT & ~filters.COMMAND, chat_ai)],
        },
        fallbacks=[CommandHandler("start", start)],
    )

    app.add_handler(conv_handler)
    logger.info("Bot started")
    app.run_polling()

if __name__ == "__main__":
    main()
