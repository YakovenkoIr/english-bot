import os
import json
import openai
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# üîπ –¢–æ–∫–µ–Ω –≤—ñ–¥ Render (Environment Variables)
TOKEN = os.getenv("TELEGRAM_TOKEN")

# üîπ API –∫–ª—é—á OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY")

# ------------------------
# /start –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["A1", "B2", "C1"], ["Chat with AI ü§ñ"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ —Ä—ñ–≤–µ–Ω—å –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –∞–±–æ —Å–ø—Ä–æ–±—É–π —á–∞—Ç –∑ –®–Ü:", reply_markup=reply_markup)

# ------------------------
# /chat –∫–æ–º–∞–Ω–¥–∞ (–®–Ü)
async def chat_ai(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text  

    try:
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢–∏ –≤–∏–∫–ª–∞–¥–∞—á –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ —ñ –ø—Ä–æ—Å—Ç–æ."},
                {"role": "user", "content": user_text}
            ]
        )
        answer = response.choices[0].message["content"]
        await update.message.reply_text(answer)

    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑—ñ –®–Ü: " + str(e))

# ------------------------
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("Chat with AI ü§ñ"), chat_ai))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat_ai))  # –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –±—É–¥—å-—è–∫–∏–π —Ç–µ–∫—Å—Ç

    print("‚úÖ Bot is running...")
    app.run_polling()

if __name__ == "__main__":
    main()


