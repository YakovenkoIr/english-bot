import os
import json
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)
from groq import Groq

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# –¢–æ–∫–µ–Ω–∏
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")

client = Groq(api_key=GROQ_API_KEY)

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è
with open("questions.json", "r", encoding="utf-8") as f:
    QUESTIONS = json.load(f)

# –°—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_state = {}

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó", callback_data="test")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ —Ç–≤—ñ–π —Ä—ñ–≤–µ–Ω—å –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó:", reply_markup=reply_markup)

# –ù–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "test":
        levels = ["A1", "A2", "B1", "B2", "C1", "C2"]
        keyboard = [[InlineKeyboardButton(level, callback_data=f"level_{level}")] for level in levels]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å —Ç–µ—Å—Ç—É:", reply_markup=reply_markup)

    elif query.data.startswith("level_"):
        level = query.data.split("_")[1]
        user_state[query.from_user.id] = {"mode": "test", "level": level, "q_index": 0, "score": 0}
        await send_question(query, context)

    elif query.data == "chat":
        user_state[query.from_user.id] = {"mode": "chat"}
        await query.edit_message_text("–¢–µ–ø–µ—Ä —Å–ø—ñ–ª–∫—É–π—Å—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é –∑ AI üá¨üáß. –ù–∞–ø–∏—à–∏ –±—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!")

# –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è
async def send_question(query, context):
    user_id = query.from_user.id
    state = user_state[user_id]
    level = state["level"]
    index = state["q_index"]

    if index < len(QUESTIONS[level]):
        q = QUESTIONS[level][index]
        keyboard = [[InlineKeyboardButton(opt, callback_data=f"answer_{i}")] for i, opt in enumerate(q["options"])]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(q["question"], reply_markup=reply_markup)
    else:
        total = len(QUESTIONS[level])
        score = state["score"]
        percent = int(score / total * 100)

        # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
        msg = f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{total} ({percent}%)\n–†—ñ–≤–µ–Ω—å —Ç–µ—Å—Ç—É: {state['level']}\n\n–†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ AI –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é üá¨üáß"
        keyboard = [[InlineKeyboardButton("üí¨ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ AI", callback_data="chat")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(msg, reply_markup=reply_markup)

# –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    state = user_state.get(user_id)

    if not state or state.get("mode") != "test":
        return

    level = state["level"]
    index = state["q_index"]
    q = QUESTIONS[level][index]

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞
    answer_index = int(query.data.split("_")[1])
    if answer_index == q["correct"]:
        state["score"] += 1

    state["q_index"] += 1
    user_state[user_id] = state
    await send_question(query, context)

# –ß–∞—Ç –∑ AI
async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    state = user_state.get(user_id)

    if not state or state.get("mode") != "chat":
        await update.message.reply_text("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–π–¥—ñ—Ç—å —Ç–µ—Å—Ç, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –≤–∞—à —Ä—ñ–≤–µ–Ω—å!")
        return

    try:
        completion = client.chat.completions.create(
            model="llama3-8b-8192",
            messages=[
                {"role": "system", "content": "You are an English teacher. Always reply in English."},
                {"role": "user", "content": update.message.text}
            ],
        )
        reply = completion.choices[0].message.content
        await update.message.reply_text(reply)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ AI: {e}")

# –ì–æ–ª–æ–≤–Ω–∞
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button, pattern="^(test|level_|chat)$"))
    app.add_handler(CallbackQueryHandler(handle_answer, pattern="^answer_"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat))

    app.run_polling()

if __name__ == "__main__":
    main()
